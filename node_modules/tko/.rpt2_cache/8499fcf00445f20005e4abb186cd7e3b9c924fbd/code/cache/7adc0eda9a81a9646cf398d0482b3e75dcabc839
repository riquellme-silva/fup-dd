{"code":"import { Builder } from 'tko.builder';\r\nimport { VirtualProvider } from 'tko.provider.virtual';\r\nimport { DataBindProvider } from 'tko.provider.databind';\r\nimport { ComponentProvider } from 'tko.provider.component';\r\nimport { AttributeProvider } from 'tko.provider.attr';\r\nimport { MultiProvider } from 'tko.provider.multi';\r\nimport { TextMustacheProvider, AttributeMustacheProvider } from 'tko.provider.mustache';\r\nimport { bindings as coreBindings } from 'tko.binding.core';\r\nimport { bindings as templateBindings } from 'tko.binding.template';\r\nimport { bindings as ifBindings } from 'tko.binding.if';\r\nimport { bindings as foreachBindings } from 'tko.binding.foreach';\r\nimport { bindings as componentBindings } from 'tko.binding.component';\r\nimport { filters } from 'tko.filter.punches';\r\nimport components from 'tko.utils.component';\r\nvar builder = new Builder({\r\n    filters: filters,\r\n    provider: new MultiProvider({\r\n        providers: [\r\n            new AttributeMustacheProvider(),\r\n            new TextMustacheProvider(),\r\n            new ComponentProvider(),\r\n            new DataBindProvider(),\r\n            new VirtualProvider(),\r\n            new AttributeProvider()\r\n        ]\r\n    }),\r\n    bindings: [\r\n        coreBindings,\r\n        templateBindings,\r\n        ifBindings,\r\n        foreachBindings,\r\n        componentBindings,\r\n        { each: foreachBindings.foreach }\r\n    ]\r\n});\r\nexport default builder.create({\r\n    version: '{{ VERSION }}',\r\n    components: components,\r\n    Component: components.ComponentABC\r\n});\r\n"}
